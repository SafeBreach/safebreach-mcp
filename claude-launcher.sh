#!/bin/bash
# SafeBreach MCP Claude Launcher with Security Context
# This script ensures Claude starts with full project knowledge and security awareness

set -e

echo "ü§ñ Launching Claude with SafeBreach MCP Security Context..."

# Check if we're in the right directory
if [ ! -f "CLAUDE.md" ]; then
    echo "‚ùå Error: Must run from SafeBreach MCP project root directory"
    echo "Please cd to the project directory and run: ./claude-launcher.sh"
    exit 1
fi

# Check if security tools are installed
check_security_tools() {
    local missing_tools=()
    
    if ! command -v pre-commit &> /dev/null; then
        missing_tools+=("pre-commit")
    fi
    
    if ! command -v gitleaks &> /dev/null; then
        missing_tools+=("gitleaks")
    fi
    
    if [ ${#missing_tools[@]} -gt 0 ]; then
        echo "‚ö†Ô∏è  Missing security tools: ${missing_tools[*]}"
        echo "Running security setup first..."
        ./setup-security.sh
    fi
}

# Validate git hooks are installed
validate_git_hooks() {
    if [ ! -f ".git/hooks/pre-commit" ]; then
        echo "‚ö†Ô∏è  Pre-commit hooks not installed. Installing..."
        pre-commit install
    fi
}

# Run security scan before launching Claude
run_security_scan() {
    echo "üîç Running security scan..."
    
    # Quick gitleaks scan
    if gitleaks detect --config .gitleaks.toml --no-git --quiet; then
        echo "‚úÖ No secrets detected in current working directory"
    else
        echo "üö® WARNING: Potential secrets detected!"
        echo "Please review and clean before proceeding."
        read -p "Continue anyway? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
}

# Create comprehensive context file for Claude
create_claude_context() {
    local context_file=".claude_context.md"
    
    echo "üìù Preparing Claude context..."
    
    cat > "$context_file" << 'EOF'
# SafeBreach MCP Project Context for Claude

This file is automatically generated to provide Claude with comprehensive project knowledge.

## üîí SECURITY FIRST - CRITICAL REMINDERS

**NEVER COMMIT REAL SECRETS:**
- API tokens, keys, passwords
- Database connection strings with credentials
- SSH private keys, AWS keys, JWT tokens
- Any production credentials

**USE SAFE PATTERNS:**
- `your-token-here`, `REPLACE_WITH_ACTUAL_TOKEN`
- `<your-api-key>`, `${API_TOKEN}`, `[TOKEN_PLACEHOLDER]`

**BEFORE ANY COMMIT:**
- Pre-commit hooks will automatically scan for secrets
- Use environment variables for real credentials
- Test with: `pre-commit run --all-files`

## üìã PROJECT STRUCTURE & BEST PRACTICES

EOF

    # Add project documentation
    echo "### Core Documentation" >> "$context_file"
    echo '```markdown' >> "$context_file"
    head -50 CLAUDE.md >> "$context_file"
    echo '```' >> "$context_file"
    echo "" >> "$context_file"
    
    # Add security guidelines
    if [ -f "SECURITY_GUIDELINES.md" ]; then
        echo "### Security Guidelines Summary" >> "$context_file"
        echo '```markdown' >> "$context_file"
        head -100 SECURITY_GUIDELINES.md >> "$context_file"
        echo '```' >> "$context_file"
        echo "" >> "$context_file"
    fi
    
    # Add current git status
    echo "### Current Git Status" >> "$context_file"
    echo '```bash' >> "$context_file"
    echo "Branch: $(git branch --show-current)" >> "$context_file"
    echo "Status: $(git status --porcelain | wc -l) modified files" >> "$context_file"
    echo "Last commit: $(git log -1 --oneline)" >> "$context_file"
    echo '```' >> "$context_file"
    echo "" >> "$context_file"
    
    # Add environment info
    echo "### Environment Information" >> "$context_file"
    echo '```bash' >> "$context_file"
    echo "Python: $(python --version 2>&1)" >> "$context_file"
    echo "uv: $(uv --version 2>&1 || echo 'not installed')" >> "$context_file"
    echo "Pre-commit: $(pre-commit --version 2>&1 || echo 'not installed')" >> "$context_file"
    echo "GitLeaks: $(gitleaks version 2>&1 | head -1 || echo 'not installed')" >> "$context_file"
    echo '```' >> "$context_file"
    echo "" >> "$context_file"
    
    # Add project commands
    echo "### Key Project Commands" >> "$context_file"
    echo '```bash' >> "$context_file"
    echo "# Run all servers:" >> "$context_file"
    echo "uv run start_all_servers.py" >> "$context_file"
    echo "" >> "$context_file"
    echo "# Run tests:" >> "$context_file"
    echo "uv run pytest safebreach_mcp_data/tests/ -m \"not e2e\"" >> "$context_file"
    echo "" >> "$context_file"
    echo "# Security scan:" >> "$context_file"
    echo "pre-commit run --all-files" >> "$context_file"
    echo "gitleaks detect --config .gitleaks.toml" >> "$context_file"
    echo '```' >> "$context_file"
    echo "" >> "$context_file"
    
    # Add file structure
    echo "### Project Structure" >> "$context_file"
    echo '```' >> "$context_file"
    find . -type f -name "*.py" | grep -E "(server|functions|types)" | head -20 >> "$context_file"
    echo '```' >> "$context_file"
    echo "" >> "$context_file"
    
    echo "‚úÖ Claude context prepared: $context_file"
}

# Create Claude startup instructions
create_claude_instructions() {
    cat << 'EOF'

üöÄ CLAUDE IS NOW LAUNCHING WITH FULL PROJECT CONTEXT

Claude will be aware of:
‚úÖ Complete project structure and architecture
‚úÖ Security best practices and token handling
‚úÖ Multi-server architecture (config, data, utilities, playbook)
‚úÖ Testing frameworks and commands
‚úÖ Environment configuration and setup
‚úÖ Git workflow and current status
‚úÖ Pre-commit hooks and security scanning

IMPORTANT REMINDERS FOR CLAUDE SESSIONS:
1. üîí NEVER commit real API tokens or secrets
2. üß™ Run tests before major changes: uv run pytest
3. üîç Use security scan: pre-commit run --all-files
4. üìö Refer to CLAUDE.md for project-specific commands
5. üõ°Ô∏è Follow SECURITY_GUIDELINES.md for all security practices

EOF
}

# Main execution
main() {
    # ASCII art banner
    cat << 'EOF'
   ____        __      ____                       __       __  __ __________
  / __/____ _ / /___ _/ __ ) ____ ___  ____ _ _____/ /_     /  |/  / ____/ __ \
 / /_  / __ `/ / __ `/ __  |/ __ `/ / / / _ `/ ___/ __ \   / /|_/ / /   / /_/ /
/ __/ / /_/ / / /_/ / /_/ / /_/ / /_/ /  __/ /  / /_/ /  / /  / / /___/ ____/ 
/_/    \__,_/_/\__,_/_____/\__,_/\__, /\___/_/  /_.___/  /_/  /_/\____/_/     
                               /____/                                        
EOF

    echo "üîí SafeBreach MCP - Secure Claude Launcher"
    echo "================================================"
    
    # Run all checks and setup
    check_security_tools
    validate_git_hooks
    run_security_scan
    create_claude_context
    create_claude_instructions
    
    # Set environment variables for Claude session
    export SAFEBREACH_MCP_SECURITY_CONTEXT="enabled"
    export SAFEBREACH_MCP_PROJECT_ROOT="$(pwd)"
    
    # Launch Claude with context
    if command -v claude &> /dev/null; then
        echo "üöÄ Launching Claude with security context..."
        claude --context-file=.claude_context.md
    else
        echo "üåê Opening Claude Desktop..."
        echo "   Context file created: .claude_context.md"
        echo "   Please reference this file in your Claude session."
        
        # Try to open Claude Desktop on different platforms
        if [[ "$OSTYPE" == "darwin"* ]]; then
            open -a "Claude" 2>/dev/null || echo "   Please open Claude Desktop manually."
        elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
            claude-desktop 2>/dev/null || echo "   Please open Claude Desktop manually."
        else
            echo "   Please open Claude Desktop manually."
        fi
    fi
    
    echo ""
    echo "‚úÖ Claude launched with full SafeBreach MCP context!"
    echo "   - Security scanning: ENABLED"
    echo "   - Pre-commit hooks: ACTIVE" 
    echo "   - Project knowledge: LOADED"
    echo ""
    echo "Happy secure coding! üõ°Ô∏èü§ñ"
}

# Run main function
main "$@"